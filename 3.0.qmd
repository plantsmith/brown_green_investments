---
title: "2.0"
description: "Utilize financial modeling tools and carbon accounting models to simulate investment returns and assess environmental impacts over a five-year period."
date: "2021-10-20"
format: 
  html:
    code-fold: false
    toc: true
    number-sections: true
    embed-resources: true
theme: Litera
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

# Questions:

```{r}

# Load libraries
library(tidyverse)
library(quantmod)
library(dplyr)
library(ggplot2)

```

# Define Portfolios

1.  Define the date range for the investment model

```{r}
#define the date range
start_date <- "2018-01-01"
end_date <- "2023-12-31"
```

2.  Build portfolios of brown and green firms.

Brown firms include: Exxon Mobil (XOM), Chevron (CVX), BP (BP), ConocoPhillips (COP), and Shell (SHEL).

Green firms include: NextEra Energy (NEE), Tesla (TSLA), Enphase Energy (ENPH), Brookfield Renewable Partners (BEP), and First Solar (FSLR).

Carbon intensity was calculated by taking a company's total emissions across Scope 1, 2, and 3 for 2023 and dividing them by the company's revenue for the same period. Measured in tonnes of CO2 per unit of revenue

```{r}
# Define company tickers
tickers <- c("XOM", "CVX", "BP", "COP", "SHEL", "NEE", "TSLA", "ENPH", "BEP", "FSLR")

# Define carbon intensities for each company (in tonnes of CO2 per unit of revenue)
emissions_intensity  <- c(
  XOM = 0.002,     # Exxon Mobil
  CVX = 0.0008,    # Chevron
  BP = 0.0002,     # BP
  COP = 0.0003,    # ConocoPhillips
  SHEL = 0.006,    # Shell
  NEE = 0.002,     # NextEra Energy
  TSLA = 0.002,    # UPDATE
  ENPH = 0.00003,  # Enphase Energy
  BEP = 0.000005,  # Brookfield Renewable Partners
  FSLR = 0.0013    # First Solar
)

# Social Cost of Carbon (SCC) in dollars per tonne of CO2
SCC <- 185
```

Cl(stock_data): Extracts the "Close" price (adjusted closing price) for each day from the stock_data object. dailyReturn(): This function calculates the daily returns based on the adjusted close prices. It computes the percentage change in the price from one day to the next.

Output: returns_list: A list containing daily returns for each company. volatility_list: A list containing the volatility (standard deviation) of returns for each company. price_data_list: A list containing the raw stock price data for each company.

```{r}
# Initialize empty lists to store data
returns_list <- list()
volatility_list <- list()
price_data_list <- list()

for (ticker in tickers) {
  getSymbols(ticker, src = "yahoo", from = start_date, to = end_date)
}


```

```{r}
prices <- do.call(merge, lapply(tickers, function(ticker) Ad(get(ticker))))
```

```{r}
returns <- na.omit(ROC(prices, type = "discrete"))
```

```{r}
avg_return <- mean(returns) * 252
```

```{r}
sd_og <- sd(returns)
sd <- sd_og / sqrt(12)  
```

```{r}
#set up initial variables
set.seed(123)  #for reproducibility
initial_investment <- 10000 # starting investment is 10k
n_scenarios <- 100  #number of scenarios to simulate
n_months <- 60  #simulation for 5 years (60 months)
```

```{r}
# Initialize results data frame to store financial and environmental data
results <- data.frame(
  scenario = integer(),
  allocation = numeric(),
  final_value = numeric(),
  total_return = numeric(),
  emissions = numeric(),
  environmental_cost = numeric()
)
```

```{r}
# Run scenarios to randomly allocate investments between firms
for (i in 1:n_scenarios) {
  
  # Randomly allocate a portion of the investment to each firm
  allocation <- runif(length(tickers))  # Random allocation weights
  allocation <- allocation / sum(allocation)  # Normalize to sum to 1
  
  # Generate monthly returns for the portfolio
  monthly_returns <- rnorm(n_months, avg_return / 12, sd)
  
  # Initialize portfolio value
  portfolio_value <- initial_investment
  for (j in 1:n_months) {
    # Update portfolio value based on monthly returns and allocation
    monthly_return <- (monthly_returns[j] * allocation) 
    portfolio_value <- portfolio_value * (1 + monthly_return)
  }
  
  # Calculate cumulative return
  total_return <- (portfolio_value - initial_investment) / initial_investment
  
  # Calculate emissions based on allocation and emissions intensity
  emissions <- initial_investment * allocation * emissions_intensity  # Metric tonnes CO2
  
  # Calculate environmental cost (Social Cost of Carbon)
  environmental_cost <- emissions * SCC
  
  # Store results for this scenario
  results <- rbind(results, data.frame(
    scenario = i,
    allocation = allocation,
    final_value = portfolio_value,
    total_return = total_return,
    emissions = emissions,
    environmental_cost = environmental_cost
  ))
}

# Summarize the results
summary(results)


```
