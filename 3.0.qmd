---
title: "2.0"
description: "Utilize financial modeling tools and carbon accounting models to simulate investment returns and assess environmental impacts over a five-year period."
date: "2021-10-20"
format: 
  html:
    code-fold: false
    toc: true
    number-sections: true
    embed-resources: true
theme: Litera
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r}

# Load libraries
library(tidyverse)
library(quantmod)
library(dplyr)
library(ggplot2)

```

# Define Portfolios

1.  Define the date range for the investment model

```{r}
#define the date range
start_date <- "2018-01-01"
end_date <- "2023-12-31"
```

2.  Build portfolios of brown and green firms.

Brown firms include: Exxon Mobil (XOM), Chevron (CVX), BP (BP), ConocoPhillips (COP), and Shell (SHEL).

Green firms include: NextEra Energy (NEE), Tesla (TSLA), Enphase Energy (ENPH), Brookfield Renewable Partners (BEP), and First Solar (FSLR).

Carbon intensity was calculated by taking a company's total emissions across Scope 1, 2, and 3 for 2023 and dividing them by the company's revenue for the same period. Measured in tonnes of CO2 per unit of revenue

```{r}
# Define company tickers
tickers <- c("XOM", "CVX", "BP", "COP", "SHEL", "NEE", "TSLA", "ENPH", "BEP", "FSLR")

# Define carbon intensities for each company (in tonnes of CO2 per unit of revenue)
emissions_intensity  <- c(
  XOM = 0.002,     # Exxon Mobil
  CVX = 0.008,    # Chevron
  BP = 0.002,     # BP
  COP = 0.003,    # ConocoPhillips
  SHEL = 0.006,    # Shell
  NEE = 0.002,     # NextEra Energy
  TSLA = 0.00002,    # UPDATE
  ENPH = 0.00003,  # Enphase Energy
  BEP = 0.000005,  # Brookfield Renewable Partners
  FSLR = 0.0013    # First Solar
)

# Social Cost of Carbon (SCC) in dollars per tonne of CO2
SCC <- 185
```


```{r}
#get data to build portfolios
#getSymbols = fetches historical stock data for these tickers from Yahoo Finance

for (ticker in tickers) {
  getSymbols(ticker, src = "yahoo", from = start_date, to = end_date)
}

```

3. Merge the adjusted closing prices for all stocks in each portfolio into individual data frames

To compile adjusted closing prices for each stock in the portfolio, lapply() iterated through brown_tickers, retrieving each stockâ€™s data and extracting only the Adjusted Close prices using Ad(). These prices were then combined into a single data frame (brown_prices) using do.call(merge, ...), aligning dates across all stocks. The adjusted closing price (ACP) was used to account for corporate actions like dividends and stock splits, giving a more accurate reflection of each stock's value over time.This process was repeated for green firms, resulting in a similar data frame for their adjusted closing prices.
```{r}
# Merge adjusted closing prices for all tickers into a single data frame.
prices <- do.call(merge, lapply(tickers, function(ticker) Ad(get(ticker))))

```

4.  Calculate daily returns for each portfolio

Daily returns were calculated for each stock in both portfolios to analyze their day-to-day performance. The daily return represents the percentage change in the Adjusted Close price from one day to the next, providing insights into daily fluctuations and enabling the assessment of volatility. This calculation was performed using the ROC() function, which calculates the rate of change in prices. Specifically, the function took the data frames brown_prices and green_prices as inputs, with the parameter type = "discrete" ensuring returns were calculated using the formula:

$$
    \text{Return} = \frac{P_t - P_{t-1}}{P_{t-1}} = \frac{P_t}{P_{t-1}} - 1
$$

where:

-   Pt is the current price (Adjusted Close price at time t)
-   Pt-1 is the previous price (Adjusted Close price at time t-1)

```{r}
# Calculate daily returns for each stock 
returns <- na.omit(ROC(prices, type = "discrete"))
```

5.  Calculate Annualized Mean Returns for Each Portfolio

To assess annual performance, the mean daily returns for each portfolio were calculated and annualized by multiplying by 252, reflecting the typical number of trading days in a year.
```{r}
# Calculate annualized average return.
avg_return <- mean(returns) * 252
```

6.  Adjusted Standard Deviations for Monthly Returns

The standard deviation of monthly returns for each portfolio was derived by adjusting the annual standard deviation. This adjustment, achieved by dividing the annual standard deviation by the square root of 12, accounts for the compounding effect of volatility over time, translating annual risk into a monthly context. By defining the standard deviation for each portfolio in monthly terms, we provide a realistic measure of return fluctuation, essential for simulating random monthly returns and assessing investment risk.

```{r}
# Calculate monthly volatility (standard deviation of returns).
sd_og <- sd(returns)
sd <- sd_og / sqrt(12)
```

# Set up the For Loop

7.  Specify parameters for the model:

```{r}
#set up initial variables
set.seed(123)  #for reproducibility
initial_investment <- 10000 # starting investment is 10k
n_scenarios <- 100  #number of scenarios to simulate
n_months <- 60  #simulation for 5 years (60 months)
```

8.  Create a loop to run 100 investing scenarios over a 5 year time period:

```{r}
# # Initialize results list to store each scenario's data before combining
# results_list <- vector("list", n_scenarios)
# 
# # Run scenarios to simulate random allocation
# for (i in 1:n_scenarios) {
#   allocation <- runif(length(tickers))  # Random allocation for each company
#   allocation <- allocation / sum(allocation)  # Normalize to sum to 1
#   
#   # Generate monthly returns for the companies (using rnorm for each company)
#   company_monthly_returns <- matrix(rnorm(n_months * length(tickers), avg_return / 12, sd), 
#                                     nrow = n_months, ncol = length(tickers))
#   portfolio_value <- initial_investment
#   monthly_portfolio_returns <- numeric(n_months)
#   
#   # Initialize a vector to store individual company volatilities
#   company_volatilities <- numeric(length(tickers))
# 
#   # Calculate emissions and environmental costs once per company
#   emissions <- initial_investment * allocation * emissions_intensity
#   environmental_cost_allocation <- emissions * SCC
# 
#   # Update portfolio value based on monthly returns and allocation
#   for (j in 1:n_months) {
#     # Calculate the total portfolio return for the month (weighted by allocation)
#     portfolio_monthly_return <- sum(company_monthly_returns[j, ] * allocation)
#     portfolio_value <- portfolio_value * (1 + portfolio_monthly_return)
#     monthly_portfolio_returns[j] <- portfolio_monthly_return  # Record the return for this month
#   }
#   
#   # Calculate cumulative return and total environmental cost
#   total_return <- (portfolio_value - initial_investment) / initial_investment
#   total_enviro_cost_scenario <- sum(environmental_cost_allocation)  # Renamed total environmental cost
#   
#   # Calculate volatility for each company (standard deviation of returns over time)
#   for (k in 1:length(tickers)) {
#     company_returns <- company_monthly_returns[, k]
#     company_volatility <- sd(company_returns) * sqrt(12)  # Annualize volatility
#     company_volatilities[k] <- company_volatility
#   }
#   
#   # Calculate portfolio (scenario) volatility based on weighted returns
#   portfolio_volatility <- sd(monthly_portfolio_returns) * sqrt(12)  # Annualize portfolio volatility
# 
#   # Store scenario results
#   results_list[[i]] <- data.frame(
#     scenario = i,
#     company = tickers,
#     allocation = allocation,
#     final_portfolio_value = portfolio_value,
#     total_return = total_return,
#     emissions = emissions,
#     environmental_cost_allocation = environmental_cost_allocation,
#     total_enviro_cost_scenario = total_enviro_cost_scenario,  # Renamed column
#     company_volatility = company_volatilities,  # Store volatility for each company
#     scenario_volatility = portfolio_volatility  # Store volatility for the entire scenario (portfolio)
#   )
# }
# 
# # Combine all scenarios into a single data frame
# results <- do.call(rbind, results_list)

```

```{r}
# # Initialize results list to store each scenario's data before combining
results_list <- vector("list", n_scenarios)

# Run scenarios to simulate random allocation
for (i in 1:n_scenarios) {
  allocation <- runif(length(tickers))  # Random allocation for each company
  allocation <- allocation / sum(allocation)  # Normalize to sum to 1
  
  # Generate monthly returns for each company
  company_monthly_returns <- matrix(rnorm(n_months * length(tickers), avg_return / 12, sd), 
                                    nrow = n_months, ncol = length(tickers))
  
  # Initialize portfolio value and returns
  portfolio_value <- initial_investment
  monthly_portfolio_returns <- numeric(n_months)
  
  # Track individual company returns
  company_final_returns <- numeric(length(tickers))
  
  # Calculate emissions and environmental costs
  emissions <- initial_investment * allocation * emissions_intensity
  environmental_cost_allocation <- emissions * SCC
  
  # Update portfolio value based on monthly returns and allocation
  for (j in 1:n_months) {
    # For each company, calculate individual company returns
    company_returns_at_j <- company_monthly_returns[j, ]  # Returns for all companies at month j
    company_final_returns <- company_final_returns + company_returns_at_j * allocation  # Accumulated return by company
    
    # Calculate portfolio monthly return
    portfolio_monthly_return <- sum(company_returns_at_j * allocation)
    portfolio_value <- portfolio_value * (1 + portfolio_monthly_return)
    monthly_portfolio_returns[j] <- portfolio_monthly_return
  }
  
  # Calculate cumulative return for individual companies
  total_return <- (portfolio_value - initial_investment) / initial_investment
  total_enviro_cost_scenario <- sum(environmental_cost_allocation)  # Total environmental cost
  
  # Store results for individual company returns and portfolio return
  results_list[[i]] <- data.frame(
    scenario = i,
    company = tickers,
    allocation = allocation,
    final_portfolio_value = portfolio_value,
    total_return = total_return,
    company_final_return = company_final_returns,  # Store individual company returns
    emissions = emissions,
    environmental_cost_allocation = environmental_cost_allocation,
    total_enviro_cost_scenario = total_enviro_cost_scenario  # Total environmental cost
  )
}

# Combine all results from all scenarios
results <- do.call(rbind, results_list)

```


A Monte Carlo simulation was conducted to analyze the environmental and financial outcomes of various random portfolio allocations across companies. For each scenario, a random allocation of investment across companies was generated and normalized to sum to one. Monthly returns for each company were then simulated using a normal distribution, with specified mean and standard deviation. These simulated monthly returns were applied to the portfolio by updating the portfolio value each month based on the returns and the respective company allocation.

Emissions for each company were calculated based on the initial investment amount, company allocation, and an emissions intensity factor. The associated environmental cost was derived by applying the Social Cost of Carbon (SCC) to the emissions. The cumulative return for the portfolio was calculated as the final portfolio value relative to the initial investment, while individual company returns were calculated separately, taking into account the unique investment allocations and the monthly returns of each company.

Volatility was calculated in two ways: first, the individual company volatility was derived by computing the standard deviation of monthly returns for each company, annualized by multiplying by the square root of 12. Second, the portfolio (scenario) volatility was calculated by measuring the standard deviation of the total portfolio returns across all companies, also annualized. The total environmental cost for each scenario was calculated by summing the environmental costs for all companies in the portfolio.

---

1. **Allocation**:  
   The percentage of the total investment allocated to each company, normalized so that the sum of all allocations equals 1. This allocation determines the proportion of the total investment assigned to each company in the portfolio.

2. **Final Portfolio Value**:  
   The total value of the investment portfolio at the end of the simulation period, accounting for all monthly returns and any compounding effects. Starting from an initial investment, the portfolioâ€™s value is updated each month based on simulated returns. This value reflects the cumulative growth (or loss) of the initial investment, considering the compounding of monthly returns.  
   *Example*: If the final portfolio value were $43,533.58, this means that at the end of the simulation period (e.g., 12 months or 5 years), the portfolio's value has grown to $43,533.58 from the initial investment.

3. **Total Return**:  
   The overall percentage change in the portfolio's value relative to its starting value over the simulation period. It represents the total gain or loss of the investment.  
   *Example*: A total return of 3.030271 means the portfolio has grown by 303.03% over the period, implying a significant increase in value.

4. **Emissions**:  
   The total emissions generated by each company in the portfolio, calculated as:  
   \[ \text{Emissions} = \text{Initial Investment} \times \text{Allocation for Company} \times \text{Emissions Intensity for Company} \]  
   This quantifies the carbon emissions associated with the investment in each company based on its emissions intensity and the allocated amount of the portfolio.

5. **Environmental Cost Allocation**:  
   The monetary cost associated with the environmental impact (emissions) for each company, calculated by multiplying the emissions for each company by the Social Cost of Carbon (SCC). The SCC represents the estimated monetary value of the damage caused by emitting one ton of CO2 (or equivalent greenhouse gases).  
   This measure helps quantify the financial implications of the environmental impact from each company, highlighting the "environmental burden" of investing in higher-emission companies. It enables investors to consider both financial returns and environmental impacts when making investment decisions.

6. **Total Environmental Cost**:  
   The sum of the environmental costs for all companies in the portfolio, calculated by aggregating the environmental cost allocation for each company. This represents the overall financial impact of the portfolioâ€™s emissions, providing insight into the total environmental burden associated with the portfolio.

7. **Volatility**:  
   A statistical measure of the variation in the portfolio's returns over a given period, reflecting the level of risk associated with the portfolio. High volatility indicates significant fluctuations in returns, signifying higher risk, while low volatility means the portfolio's returns are more stable and predictable.  
   Volatility is calculated based on the standard deviation of monthly returns, annualized by multiplying by the square root of 12. This measure helps investors assess the uncertainty or risk associated with the portfolio's performance.




```{r}
# Summarize the company returns across all scenarios
company_returns_summary <- results %>%
  group_by(company) %>%
  summarise(mean_company_return = mean(company_final_return)) %>%
  arrange(desc(mean_company_return))  # Sort by average return

# Plot the individual returns for each company
ggplot(company_returns_summary, aes(x = reorder(company, mean_company_return), y = mean_company_return, fill = company)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Company Return Across Scenarios", 
       x = "Company", y = "Average Return") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate labels for readability

```

```{r}
library(ggplot2)
library(dplyr)

# Summarize environmental cost allocation by company across all scenarios
ggplot(results %>%
         group_by(company) %>%
         summarise(total_enviro_cost = sum(environmental_cost_allocation)), 
       aes(x = company, y = total_enviro_cost, fill = company)) +
  geom_bar(stat = "identity") +  # Use pre-summarized values
  labs(title = "Environmental Cost Allocation by Company Across Scenarios", 
       x = "Company", y = "Total Environmental Cost Allocation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels if needed

```

```{r}
# Plot Scenario (Portfolio) Volatility Distribution
ggplot(results, aes(x = scenario_volatility)) +
  geom_histogram(binwidth = 0.05, fill = "orange", color = "black", alpha = 0.7) +
  labs(title = "Scenario (Portfolio) Volatility Distribution Across Scenarios", x = "Portfolio Volatility (Annualized)", y = "Frequency") +
  theme_minimal()


```


```{r}


```

