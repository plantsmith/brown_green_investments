---
title: "Investment Simulation and Environmental Impact Assessment: A Portfolio Analysis of Brown vs. Green Firms"
description: "Utilize financial modeling tools and carbon accounting models to simulate investment returns and assess environmental impacts over a five-year period."
date: "2021-10-20"
format: 
  html:
    code-fold: false
    toc: true
    number-sections: true
    embed-resources: true
theme: Litera
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(here)
library(quantmod) #for modeling financial data
```

# Define Portfolios

1.  Define the date range for the investment model

```{r}
#define the date range
start_date <- "2018-01-01"
end_date <- "2023-12-31"
```

2.  Build portfolios of brown and green firms.

Brown firms include: Exxon Mobil (XOM), Chevron (CVX), BP (BP), ConocoPhillips (COP), and Shell (SHEL).

Green firms include: NextEra Energy (NEE), Tesla (TSLA), Enphase Energy (ENPH), Brookfield Renewable Partners (BEP), and First Solar (FSLR).

```{r}
# #create vectors based on brown and green tickers
brown_tickers <- c("XOM", "CVX", "BP", "COP", "SHEL")  # Fossil fuel companies
green_tickers <- c("NEE", "TSLA", "ENPH", "BEP", "FSLR")  # Renewable/green tech companies

```

```{r}
# brown_tickers <- c("XOM", "CVX", "BTU", "RTNTF", "BAYRY")  # Fossil fuel companies
# green_tickers <- c("TSLA", "HGLD", "DNNGY", "BYND","UL")  # Sustainable companies
```

```{r}
# # #create vectors based on brown and green tickers
# brown_tickers <- c("XOM", "CVX", "BP", "COP", "SHEL", "BTU", "RTNTF", "BAYRY" )  # Fossil fuel companies
# green_tickers <- c("NEE", "TSLA", "ENPH", "BEP", "FSLR", "BYND","HGLD", "UL")  # Renewable/green tech/sustainable companies
```

```{r}
#get data to build portfolios
#getSymbols = fetches historical stock data for these tickers from Yahoo Finance

for (ticker in brown_tickers) {
  getSymbols(ticker, src = "yahoo", from = start_date, to = end_date)
}

# Fetch data for the Green Portfolio
for (ticker in green_tickers) {
  getSymbols(ticker, src = "yahoo", from = start_date, to = end_date)
}
```

3.  Merge the adjusted closing prices for all stocks in each portfolio into individual data frames

To compile adjusted closing prices for each stock in the portfolio, `lapply()` iterated through `brown_tickers`, retrieving each stock’s data and extracting only the Adjusted Close prices using `Ad()`. These prices were then combined into a single data frame (`brown_prices`) using `do.call(merge, ...)`, aligning dates across all stocks. The adjusted closing price (ACP) was used to account for corporate actions like dividends and stock splits, giving a more accurate reflection of each stock's value over time.This process was repeated for green firms, resulting in a similar data frame for their adjusted closing prices.

```{r}
# Combine adjusted closing prices for each portfolio
brown_prices <- do.call(merge, lapply(brown_tickers, function(ticker) Ad(get(ticker))))

green_prices <- do.call(merge, lapply(green_tickers, function(ticker) Ad(get(ticker))))

```

4.  Calculate daily returns for each portfolio

Daily returns were calculated for each stock in both portfolios to analyze their day-to-day performance. The daily return represents the percentage change in the Adjusted Close price from one day to the next, providing insights into daily fluctuations and enabling the assessment of volatility. This calculation was performed using the ROC() function, which calculates the rate of change in prices. Specifically, the function took the data frames brown_prices and green_prices as inputs, with the parameter type = "discrete" ensuring returns were calculated using the formula:

$$
    \text{Return} = \frac{P_t - P_{t-1}}{P_{t-1}} = \frac{P_t}{P_{t-1}} - 1
$$

where:

-   Pt is the current price (Adjusted Close price at time t)
-   Pt-1 is the previous price (Adjusted Close price at time t-1)

```{r}
brown_returns <- na.omit(ROC(brown_prices, type = "discrete"))
green_returns <- na.omit(ROC(green_prices, type = "discrete"))
```

5.  Calculate Annualized Mean Returns for Each Portfolio

To assess annual performance, the mean daily returns for each portfolio were calculated and annualized by multiplying by 252, reflecting the typical number of trading days in a year.

```{r}
#calculate annual mean returns for each portfolio
brown_avg_return <- mean(brown_returns) * 252
green_avg_return <- mean(green_returns) * 252

```

6.  Adjusted Standard Deviations for Monthly Returns

The standard deviation of monthly returns for each portfolio was derived by adjusting the annual standard deviation. This adjustment, achieved by dividing the annual standard deviation by the square root of 12, accounts for the compounding effect of volatility over time, translating annual risk into a monthly context. By defining the standard deviation for each portfolio in monthly terms, we provide a realistic measure of return fluctuation, essential for simulating random monthly returns and assessing investment risk.

```{r}
#adjusted standard deviations for monthly returns
brown_sd_og <- sd(brown_returns)
green_sd_og <- sd(green_returns)

brown_sd <- brown_sd_og / sqrt(12)   
green_sd <- green_sd_og / sqrt(12)    

```

# Set up the For Loop

7.  Specify parameters for the model:

```{r}
#set up initial variables
set.seed(123)  #for reproducibility
initial_investment <- 10000 # starting investment is 10k
n_scenarios <- 1000  #number of scenarios to simulate
n_months <- 60  #simulation for 5 years (60 months)

```

8.  Create new data frame to hold results:

Variables:

-   Scenario: Scenario number
-   Brown_allocation: Portion of investment in brown stocks
-   Green_allocation: Portion of investment in green stocks
-   Final_value: Final portfolio value after the simulation
-   Total_return: Total return on investment

```{r}
results <- data.frame(
  scenario = integer(),
  brown_allocation = numeric(),
  green_allocation = numeric(),
  final_value = numeric(),
  total_return = numeric()
)
```

9.  Create a loop to run 100 investing scenarios over a 5 year time period:

To simulate portfolio growth across 100 different scenarios, a loop was created to iterate until `i` reached `n_scenarios` (100). In each iteration, a random allocation to brown stocks was generated using `runif(1, 0, 1)`, with the remainder allocated to green stocks. Monthly returns for each portfolio were generated using the `rnorm()` function, with parameters including the average monthly return (calculated by dividing the annual return by 12) and the standard deviation.

The initial investment was updated over 5 months by calculating a weighted monthly return, based on the allocated portions for each portfolio. This return was applied to the portfolio value, compounding over time. At the end of each scenario, the cumulative return was calculated as a fraction of the initial investment, representing total growth for that scenario.

```{r}
#run scenarios with a loop that repeats until i equals n_scenarios (100)

for (i in 1:n_scenarios) {
  
  #randomly allocate a portion to brown and the rest to green
  brown_allocation <- runif(1, 0, 1)    # Random allocation between 0 and 1
  green_allocation <- 1 - brown_allocation
  
  #generate monthly returns for each portfolio type
  brown_monthly_returns <- rnorm(n_months, brown_avg_return / 12, brown_sd)
  green_monthly_returns <- rnorm(n_months, green_avg_return / 12, green_sd)
  
  #calculate portfolio growth over time
  #j starts at 1 and goes up to n_months (60).
  portfolio_value <- initial_investment
  for (j in 1:n_months) {
    # Update portfolio value with weighted returns for the month
    monthly_return <- (brown_monthly_returns[j] * brown_allocation) + 
                      (green_monthly_returns[j] * green_allocation)
    portfolio_value <- portfolio_value * (1 + monthly_return)
  }
  
  #calculate cumulative return
  total_return <- (portfolio_value - initial_investment) / initial_investment
  
  #update results df
  results <- rbind(results, data.frame(
    scenario = i,
    brown_allocation = brown_allocation,
    green_allocation = green_allocation,
    final_value = portfolio_value,
    total_return = total_return
  ))
}
  
```

```{r}
summary(results)
```

11. Visualize the portfolio allocation

```{r}
# Plot total return vs. brown portfolio allocation
brown_plot <- ggplot(results, aes(x = brown_allocation, y = total_return)) +
  geom_point(color = "peachpuff4") +
  labs(
    title = "Impact of Brown Allocation on Returns",
    x = "Brown Portfolio Allocation",
    y = "Total Return" 
  ) +
  theme_minimal()

brown_plot

# Plot total return vs. green portfolio allocation
green_plot <- ggplot(results, aes(x = green_allocation, y = total_return)) +
  geom_point(color = "springgreen4") +
  # geom_smooth(sd = FALSE) +
  labs(
    title = "Impact of Green Allocation on Returns",
    x = "Green Portfolio Allocation",
        # y = NULL) +  # Remove y-axis label
    y = "Total Return") +
  theme_minimal()

green_plot



```

# Environmental Cost

Use an emissions factor to estimate average CO₂ emissions per dollar invested in different sectors

```{r}
# calculate_environmental_cost <- function(brown_allocation, 
#                                          green_allocation, 
#                                          # Define parameters that won't change
#                                          initial_investment = 10000, 
#                                          emissions_factor_brown = 0.001, 
#                                          emissions_factor_green = 0.0003, 
#                                          SCC = 185) {
#   
#   # Calculate emissions
#   brown_emissions <- initial_investment * brown_allocation * emissions_factor_brown
#   green_emissions <- initial_investment * green_allocation * emissions_factor_green
#   
#   # Total emissions and environmental cost
#   total_emissions <- brown_emissions + green_emissions
#   environmental_cost <- total_emissions * SCC
#   
#   return(environmental_cost)
# }
# 
# 
# # Example usage of the function
# brown_allocation <- 0
# green_allocation <- 1
# 
# environmental_cost <- calculate_environmental_cost(brown_allocation, green_allocation)
# print(environmental_cost)

```

\^\^\^\^ this didnt work how I wanted it to

Simulate incorporated environmental costs by calculating carbon emissions based on portfolio allocations. Using an emissions factor of 0.002 tonnes CO₂ per dollar for brown investments and 0.0007 for green, emissions were calculated as the product of the allocation and emissions factor. The total emissions were then multiplied by the Social Cost of Carbon (SCC), set at \$185 per tonne, to estimate the environmental cost.

The emission factors were calculated by taking a company's total emissions across Scope 1, 2, and 3 for 2023 and dividing them by the company's revenue for the same period.

```{r}
# Parameters for environmental impact (amended code from above)
SCC <- 185  # Social Cost of Carbon in dollars per metric tonne of CO2.
emissions_factor_brown <- 0.002  # Emissions factor for brown investments: tonnes CO₂ per dollar invested
emissions_factor_green <- 0.0007  # Emissions factor for green investments: tonnes CO₂ per dollar invested

# Initialize data frame for storing results w/ environmental impacts
results <- data.frame(
  scenario = integer(),
  brown_allocation = numeric(),
  green_allocation = numeric(),
  final_value = numeric(),
  total_return = numeric(),
  brown_emissions = numeric(),
  green_emissions = numeric(),
  total_emissions = numeric(),
  environmental_cost = numeric()
)

#run the scenarios
for (i in 1:n_scenarios) {
  
#randomly allocate a portion to brown and the rest to green
  brown_allocation <- runif(1, 0, 1)  # Random allocation between 0 and 1
  green_allocation <- 1 - brown_allocation
  
#generate monthly returns for each portfolio type
  brown_monthly_returns <- rnorm(n_months, brown_avg_return / 12, brown_sd)
  green_monthly_returns <- rnorm(n_months, green_avg_return / 12, green_sd)
  
#initialize portfolio value
  portfolio_value <- initial_investment
  for (j in 1:n_months) {
    # Update portfolio value with weighted returns for the month
    monthly_return <- (brown_monthly_returns[j] * brown_allocation) + 
                      (green_monthly_returns[j] * green_allocation)
    portfolio_value <- portfolio_value * (1 + monthly_return)
  }
  
#calculate cumulative return
  total_return <- (portfolio_value - initial_investment) / initial_investment
  
#calculate emissions based on allocation
  #initial investment ($) * allocation * emissions factor (metric tonnes CO2 per dollar invested), dollars cancel out leaving metric tonnes CO2
  brown_emissions <- initial_investment * brown_allocation * emissions_factor_brown
  green_emissions <- initial_investment * green_allocation * emissions_factor_green
  total_emissions <- brown_emissions + green_emissions #metric tonnes CO2
  
#calculate environmental cost ($) - emissions in metric tonnes CO2 * SCC in dollars per metric tonne
  environmental_cost <- total_emissions * SCC
  
#update results data frame
  results <- rbind(results, data.frame(
    scenario = i,
    brown_allocation = brown_allocation,
    green_allocation = green_allocation,
    final_value = portfolio_value,
    total_return = total_return,
    brown_emissions = brown_emissions,
    green_emissions = green_emissions,
    total_emissions = total_emissions,
    environmental_cost = environmental_cost
  ))
}

#results
summary(results)

```

```{r}

#plot it
brown_environmental_cost_plot <- ggplot(results, aes(x = brown_allocation, y = environmental_cost)) +
  geom_line(color = "peachpuff4", size = 1) +  # Use a line instead of points
  labs(
    title = "Impact of Brown Allocation on Environmental Cost",
    x = "Brown Portfolio Allocation",
    y = "Environmental Cost (USD)") +
  scale_y_continuous(breaks = seq(0, max(results$environmental_cost), by = 500)) +
  theme_minimal()

brown_environmental_cost_plot


green_environmental_cost_plot <- ggplot(results, aes(x = green_allocation, y = environmental_cost)) +
  geom_line(color = "springgreen4", size = 1) +  # Use a line instead of points
  labs(
    title = "Impact of Green Allocation on Environmental Cost",
    x = "Green Portfolio Allocation",
    y = "Environmental Cost (USD)") +
 scale_y_continuous(breaks = seq(0, max(results$environmental_cost), by = 500)) + 
  theme_minimal()

green_environmental_cost_plot

```

-   1\. Sector-Specific Emissions factor Data

    Many organizations and studies provide emissions intensity data by sector, measured in tonnes of CO₂ per unit of revenue, production, or value invested. High-emissions sectors typically include energy (especially fossil fuels), utilities, materials, and transportation, while green sectors often include renewable energy, technology with low environmental impact, and environmentally-focused industries.

    You could use emissions intensity data to estimate average CO₂ emissions per dollar invested in different sectors:

    The International Energy Agency (IEA) and Environmental Protection Agency (EPA) publish sectoral emissions intensity data.

    Carbon Disclosure Project (CDP) and Sustainalytics also provide emissions reports, often aggregated by sector.

-   Large companies, especially public companies, publish **annual sustainability or ESG reports** with data on their total CO₂ emissions (Scope 1, 2, and sometimes 3 emissions).

-   To find emissions per dollar invested, take the company’s total emissions and divide it by its market capitalization or revenue.

-   For example, if a company in the energy sector emits 10 million tonnes of CO₂ annually and has a market cap of \$100 billion, you might calculate an approximate emissions rate of 100,000,000,000dollars/10,000,000tonnes​=0.0001tonnes CO₂ per dollar invested.

```{r}

```
